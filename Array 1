Problem Statement:
You are given a 0-indexed array of distinct integers nums.
There is an element in nums that has the lowest value and an element that has the highest value. We call them the minimum and maximum respectively. Your goal is to remove both these elements from the array.
A deletion is defined as either removing an element from the front of the array or removing an element from the back of the array.
Return the minimum number of deletions it would take to remove both the minimum and maximum element from the array.

Solution : 
class Solution(object):
    def minimumDeletions(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        
        # Finding the  minimum and maximum elements
        min_index = nums.index(min(nums))
        max_index = nums.index(max(nums))
        
        # Ensuring min_index < max_index 
        if min_index > max_index:
            min_index, max_index = max_index, min_index
        
        # Remove both from the front
        front = max_index + 1
        
        # Remove both from the back
        back = n - min_index
        
        # Remove one from the front and one from the back
        both = (min_index + 1) + (n - max_index)
        
        # Return the minimum deletions among the three options
        return min(front, back, both)

